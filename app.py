# import streamlit as st
from chatbot.tools import create_chroma_retriever
from langchain_ollama import ChatOllama
from config.settings import LLM_MODEL
import logging
from langchain_huggingface.embeddings import HuggingFaceEmbeddings
from config.settings import EMBEDDING_MODEL
from chatbot.agent import create_agent_chains
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("App")

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Streamlit
# st.set_page_config(page_title="Chatbot H·ªó Tr·ª£ Sinh Vi√™n", layout="wide")
# st.title("üí¨ EduBot ")

# L·ªãch s·ª≠ h·ªôi tho·∫°i
# if "chat_history" not in st.session_state:
#     st.session_state["chat_history"] = []

# Kh·ªüi t·∫°o m√¥ h√¨nh LLM
try:
    llm = ChatOllama(model=LLM_MODEL, temperature=0.7, language="vi")
    logger.info("M√¥ h√¨nh LLM ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
except Exception as e:
    logger.error(f"L·ªói khi kh·ªüi t·∫°o m√¥ h√¨nh LLM: {e}")
    # st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
    # st.stop()

# Kh·ªüi t·∫°o embedding model
try:
    embedding_model = HuggingFaceEmbeddings(model_name=EMBEDDING_MODEL)
    logger.info("M√¥ h√¨nh embedding ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
except Exception as e:
    logger.error(f"L·ªói khi kh·ªüi t·∫°o embedding model: {e}")
    # st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o embedding model. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
    # st.stop()
    
# Kh·ªüi t·∫°o retriever
try:
    retriever = create_chroma_retriever(embedding_model)
    logger.info("Retriever ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
except Exception as e:
    logger.error(f"L·ªói khi kh·ªüi t·∫°o retriever: {e}")
    # st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o retriever. Vui l√≤ng ki·ªÉm tra l·∫°i vectorstore.")
    # st.stop()


# Kh·ªüi t·∫°o agent
try:
    agent_executor = create_agent_chains(llm, retriever)
    logger.info("Agent ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
except Exception as e:
    logger.error(f"L·ªói khi kh·ªüi t·∫°o agent: {e}")
    # st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o agent. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
    # st.stop()
    
chat_history = []

# query = "C√°c chuy√™n ng√†nh trong ng√†nh c√¥ng ngh·ªá th√¥ng tin"
query = "C√°c m√¥n ƒë·∫°i c∆∞∆°ng trong ng√†nh c√¥ng ngh·ªá th√¥ng tin"
document = retriever.invoke(query)

for doc in document:
    print("\n\n ----- \n\n")
    print(doc.page_content)

# # G·ª≠i c√¢u h·ªèi ƒë·∫øn agent v√† l·∫•y k·∫øt qu·∫£
# response = agent_executor.invoke({"input": query, "chat_history": chat_history})
# print("AI:", response['output'])

# Giao di·ªán nh·∫≠p c√¢u h·ªèi
# Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
# st.subheader("L·ªãch s·ª≠ h·ªôi tho·∫°i")
# chat_placeholder = st.container()
# with chat_placeholder:
#     for chat in st.session_state["chat_history"]:
#         if chat["role"] == "human":
#             st.markdown(f"üë§ **B·∫°n:** {chat['content']}")
#         elif chat["role"] == "assistant":
#             st.markdown(f"ü§ñ **Chatbot:** {chat['content']}")

# # √î nh·∫≠p c√¢u h·ªèi ·ªü b√™n d∆∞·ªõi
# st.subheader("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n")
# query = st.text_input("", placeholder="H√£y nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")
# if query:
#     try:
#         # G·ª≠i c√¢u h·ªèi ƒë·∫øn agent v√† l·∫•y k·∫øt qu·∫£
#         response = agent_executor.invoke({"input": query, "chat_history": st.session_state["chat_history"]})
#         st.session_state["chat_history"].append({"role": "human", "content": query})
#         st.session_state["chat_history"].append({"role": "assistant", "content": response["output"]})

#         # L√†m m·ªõi giao di·ªán l·ªãch s·ª≠ h·ªôi tho·∫°i
#         chat_placeholder.empty()
#         with chat_placeholder:
#             for chat in st.session_state["chat_history"]:
#                 if chat["role"] == "human":
#                     st.markdown(f"üë§ **B·∫°n:** {chat['content']}")
#                 elif chat["role"] == "assistant":
#                     st.markdown(f"ü§ñ **Chatbot:** {chat['content']}")

#     except Exception as e:
#         logger.error(f"L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {e}")
#         st.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.")
